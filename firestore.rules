/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to game configuration data.
 * Administrative actions are restricted to authorized moderator roles.
 *
 * Data Structure:
 * - User-specific data (profiles, gladiators, wallets, free play games, game tickets) is nested under /users/{userId}.
 * - Game types are stored in a top-level /gameTypes collection.
 * - Moderator actions are stored in a top-level /moderatorActions collection.
 * - Free games are stored in a top-level /freegames/{gameId} collection, with tickets in a subcollection.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Free game data is publicly readable, but only authorized users can create, update, or delete it.
 * - The rules use path-based ownership to control access to user-specific data.
 * - Data validation is minimized in this prototype to facilitate rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user has a moderator role.
     * @return {bool} True if the user is a moderator, false otherwise.
     * @todo Implement actual role checking logic (e.g., using a custom claim).
     */
    function isModerator() {
      // Placeholder: Replace with actual role checking logic.
      return false;
    }


    /**
     * @description Enforces path-based ownership and validates relational integrity.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) User 'test_user' can create their profile if userId and userProfileId match auth.uid.
     * @deny (create) User 'test_user' cannot create a profile for another user.
     * @principle Enforces document ownership and relational integrity between the path and document data.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for ArenaGladiator documents.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create) User 'test_user' can create an ArenaGladiator under their user ID.
     * @deny (create) User 'test_user' cannot create an ArenaGladiator under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for Wallet documents.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User 'test_user' can create a Wallet under their user ID.
     * @deny (create) User 'test_user' cannot create a Wallet under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for FreePlayGame documents.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create) User 'test_user' can create a FreePlayGame under their user ID.
     * @deny (create) User 'test_user' cannot create a FreePlayGame under another user's ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces path-based ownership for GameTicket documents within an ArenaGladiator.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create) User 'test_user' can create a GameTicket under their ArenaGladiator.
     * @deny (create) User 'test_user' cannot create a GameTicket under another user's ArenaGladiator.
     * @principle Enforces document ownership for writes in a nested collection.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to GameType documents. Write access is denied.
     * @path /gameTypes/{gameTypeId}
     * @allow (get) Any user can read GameType data.
     * @deny (create) No user can create a GameType document directly.
     * @principle Allows public read access to shared game configuration data.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to ModeratorAction documents to authorized moderators or administrators.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (create) A moderator can create a ModeratorAction. Requires role validation (TODO).
     * @deny (create) A regular user cannot create a ModeratorAction.
     * @principle Restricts administrative actions to authorized personnel.
     */
    match /moderatorActions/{moderatorActionId} {
      allow get: if isModerator();
      allow list: if isModerator();
      allow create: if isModerator();
      allow update: if isModerator();
      allow delete: if isModerator();
    }

    /**
     * @description Allows public read access to free games. Write access should be restricted to authorized users.
     * @path /freegames/{gameId}
     * @allow (get) Any user can read free game data.
     * @allow (list) Any user can list free game data.
     * @deny (create) No user can create/update/delete free game data directly.
     * @principle Allows public read access to shared game configuration data while restricting write access.
     */
    match /freegames/{gameId} {
        allow get: if true;
        allow list: if true;
        allow create: if isModerator(); // Only moderators can create
        allow update: if isModerator(); // Only moderators can update
        allow delete: if isModerator(); // Only moderators can delete

        /**
         * @description Allows anyone to read free game tickets. Writes are denied.
         * @path /freegames/{gameId}/tickets/{ticketId}
         * @allow (get) Any user can read a free game ticket.
         * @allow (list) Any user can list free game tickets.
         * @deny (create) No user can create a free game ticket directly.
         * @principle: Public read access with no write access.
         */
        match /tickets/{ticketId} {
            allow get: if true;
            allow list: if true;
            allow create: if false;
            allow update: if false;
            allow delete: if false;
        }
    }
  }
}