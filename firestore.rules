/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data,
 *              allows public read access to game types, and restricts moderator actions to admins/moderators.
 *              Sponsors (Munerators) can only manage their own data. The rules are written
 *              to be performant and avoid costly `get()` operations.
 *
 * Data Structure:
 * - /sponsors/{sponsorId}: Sponsor accounts. Only the authenticated sponsor can access their data.
 * - /users/{userId}/userProfiles/{userProfileId}: User profile information, accessible only to the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}: Gladiator profiles, accessible only to the user.
 * - /users/{userId}/wallets/{walletId}: User wallets, accessible only to the user.
 * - /users/{userId}/freePlayGames/{freePlayGameId}: Free play game sessions, accessible only to the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}: Game tickets, accessible only to the user.
 * - /gameTypes/{gameTypeId}: Publicly readable game types.
 * - /moderatorActions/{moderatorActionId}: Moderator actions, restricted to admins/moderators.
 * - /freegames/{gameId}: Publicly writable free games.
 * - /freegames/{gameId}/tickets/{ticketId}: Publicly writable free game tickets.
 * - /operators/{operatorId}: Operator accounts. Access restricted to super admins.
 *
 * Key Security Decisions:
 * - User data is strictly owned and controlled by the user based on their UID.
 * - Listing of user documents is generally allowed within the user's own subcollections.
 * - Public read access is granted to the `/gameTypes` collection.
 * - Super Admin access is granted to `/operators` collection.
 *
 * Denormalization for Authorization:
 * - User ownership is determined by matching the authenticated user's UID to the document ID in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows sponsors to manage their own data.
     * @path /sponsors/{sponsorId}
     * @allow (read, write): if the user is authenticated and their UID matches the sponsorId.
     * @deny (read, write): if the user is not authenticated or their UID does not match the sponsorId.
     * @principle Enforces document ownership for sponsors.
     */
    match /sponsors/{sponsorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(sponsorId) {
        return isSignedIn() && request.auth.uid == sponsorId;
      }

      function isExistingOwner(sponsorId) {
        return isOwner(sponsorId) && resource != null;
      }

      allow get: if isOwner(sponsorId);
      allow list: if false;

      allow create: if isOwner(sponsorId);
      allow update: if isExistingOwner(sponsorId);
      allow delete: if isExistingOwner(sponsorId);
    }

    /**
     * @description Allows sponsors to create and manage games.
     * @path /sponsors/{sponsorId}/games/{gameId}
     * @allow (read, write): if the user is authenticated and their UID matches the sponsorId.
     * @deny (read, write): if the user is not authenticated or their UID does not match the sponsorId.
     * @principle Enforces document ownership for sponsors' games.
     */
    match /sponsors/{sponsorId}/games/{gameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(sponsorId) {
        return isSignedIn() && request.auth.uid == sponsorId;
      }

      function isExistingOwner(sponsorId) {
        return isOwner(sponsorId) && resource != null;
      }

      allow get: if isOwner(sponsorId);
      allow list: if isOwner(sponsorId);

      allow create: if isOwner(sponsorId);
      allow update: if isExistingOwner(sponsorId);
      allow delete: if isExistingOwner(sponsorId);
    }

    /**
     * @description Allows a user to manage their own profile.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (read, write): if the user is authenticated and their UID matches the userId.
     * @deny (read, write): if the user is not authenticated or their UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own ArenaGladiator profile.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (read, write): if the user is authenticated and their UID matches the userId.
     * @deny (read, write): if the user is not authenticated or their UID does not match the userId.
     * @principle Enforces document ownership for ArenaGladiator profiles.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own wallet.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (read, write): if the user is authenticated and their UID matches the userId.
     * @deny (read, write): if the user is not authenticated or their UID does not match the userId.
     * @principle Enforces document ownership for user wallets.
     */
    match /users/{userId}/wallets/{walletId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their free play game sessions.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (read, write): if the user is authenticated and their UID matches the userId.
     * @deny (read, write): if the user is not authenticated or their UID does not match the userId.
     * @principle Enforces document ownership for free play game sessions.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their game tickets.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (read, write): if the user is authenticated and their UID matches the userId.
     * @deny (read, write): if the user is not authenticated or their UID does not match the userId.
     * @principle Enforces document ownership for game tickets.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.arenaGladiatorId == arenaGladiatorId;
      allow update: if isExistingOwner(userId) && request.resource.data.arenaGladiatorId == resource.data.arenaGladiatorId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to game types.
     * @path /gameTypes/{gameTypeId}
     * @allow (read): if true (publicly readable).
     * @deny (write): always denied.
     * @principle Allows public read access to game types.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to moderator actions to authenticated users.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (read, write): if the user is an admin or moderator.
     * @deny (read, write): if the user is not an admin or moderator.
     */
    match /moderatorActions/{moderatorActionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Implement a proper role-based access control mechanism.
      // The following is a placeholder and MUST be replaced with a real implementation.
      function isAdminOrModerator() {
        return isSignedIn(); // Placeholder: Replace with actual role check.
      }

      allow get: if isAdminOrModerator();
      allow list: if isAdminOrModerator();

      allow create: if isAdminOrModerator();
      allow update: if isAdminOrModerator() && resource != null;
      allow delete: if isAdminOrModerator() && resource != null;
    }

    /**
     * @description Allows anyone to create or read free games.
     * @path /freegames/{gameId}
     * @allow (read, write): if true (publicly readable and writable).
     * @principle Allows anyone to create free games.
     */
    match /freegames/{gameId} {
      allow get: if true;
      allow list: if true;

      allow create: if true;
      allow update: if resource != null;
      allow delete: if resource != null;
    }

    /**
     * @description Allows anyone to create or read free game tickets.
     * @path /freegames/{gameId}/tickets/{ticketId}
     * @allow (read, write): if true (publicly readable and writable).
     * @principle Allows anyone to create free game tickets.
     */
    match /freegames/{gameId}/tickets/{ticketId} {
      allow get: if true;
      allow list: if true;

      allow create: if true;
      allow update: if resource != null;
      allow delete: if resource != null;
    }

    /**
     * @description Restricts access to operator data to super admins.
     * @path /operators/{operatorId}
     * @allow (read, write): if the user is a super admin.
     * @deny (read, write): if the user is not a super admin.
     */
    match /operators/{operatorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // TODO: Implement a proper role-based access control mechanism.
      // The following is a placeholder and MUST be replaced with a real implementation.
      function isSuperAdmin() {
        return isSignedIn(); // Placeholder: Replace with actual role check.
      }

      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();

      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }
  }
}