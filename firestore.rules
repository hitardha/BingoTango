/**
 * @file Firebase Security Rules for Firestore.
 * @description This ruleset enforces a strict user-ownership model for data nested under `/users/{userId}`.
 *  It also provides public read access to `/gameTypes/{gameTypeId}` and `/freegames/{gameId}`, while restricting writes to owner.
 *  Moderator actions are restricted to authenticated moderators/admins only.
 *
 *  Data Structure:
 *  - `/users/{userId}/userProfiles/{userProfileId}`: User profile data, accessible only to the owning user.
 *  - `/users/{userId}/arenaGladiators/{arenaGladiatorId}`: ArenaGladiator data, accessible only to the owning user.
 *  - `/users/{userId}/wallets/{walletId}`: Wallet data, accessible only to the owning user.
 *  - `/users/{userId}/freePlayGames/{freePlayGameId}`: FreePlayGame data, accessible only to the owning user.
 *  - `/users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}`: GameTicket data, accessible only to the owning user.
 *  - `/gameTypes/{gameTypeId}`: Game type data, publicly readable.
 *  - `/moderatorActions/{moderatorActionId}`: Moderator actions, accessible only to moderators/admins.
 *  - `/freegames/{gameId}`: Free game configurations, publicly readable with owner-only writes.
 *  - `/freegames/{gameId}/tickets/{ticketId}`: Free game tickets, accessible only to moderators/admins.
 *
 *  Key Security Decisions:
 *  - User listing is disallowed.
 *  - Data within the `/users/{userId}` tree is strictly controlled by the owning user, enforced via path-based ownership.
 *  - Public read access is granted to `GameType` and `FreeGame` collections for game configuration and game data.
 *  - Writes to `FreeGame` collection are restricted to owner. The 'FreeGame' entity is missing an 'ownerId' or 'authorId' field.
 *  - Moderator actions are secured with role-based access control (RBAC), restricting access to moderator or administrator roles. However, no role information is present for request.auth.uid
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Combines ownership check with existence check for destructive operations.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     *  Security rules for user profile data, ensuring only the owning user can access their profile.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) User 'user123' can create their profile if userId and userProfileId match their auth ID.
     * @allow (get, update, delete) User 'user123' can access their profile if userId and userProfileId match their auth ID.
     * @deny (create, get, update, delete) User 'user456' cannot access 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && userId == userProfileId && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *  Security rules for ArenaGladiator data, ensuring only the owning user can access their Gladiator profiles.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create) User 'user123' can create a Gladiator profile under their ID.
     * @allow (get, update, delete) User 'user123' can access their Gladiator profile.
     * @deny (create, get, update, delete) User 'user456' cannot access 'user123' Gladiator profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *  Security rules for Wallet data, ensuring only the owning user can access their wallet.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User 'user123' can create a wallet under their ID.
     * @allow (get, update, delete) User 'user123' can access their wallet.
     * @deny (create, get, update, delete) User 'user456' cannot access 'user123' wallet.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == walletId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *  Security rules for FreePlayGame data, ensuring only the owning user can access their game sessions.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create) User 'user123' can create a game session under their ID.
     * @allow (get, update, delete) User 'user123' can access their game session.
     * @deny (create, get, update, delete) User 'user456' cannot access 'user123' game session.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *  Security rules for GameTicket data, ensuring only the owning user can access their game tickets.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create) User 'user123' can create a game ticket under their Gladiator profile.
     * @allow (get, update, delete) User 'user123' can access their game ticket.
     * @deny (create, get, update, delete) User 'user456' cannot access 'user123' game ticket.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.arenaGladiatorId == arenaGladiatorId;
      allow update: if isExistingOwner(userId) && request.resource.data.arenaGladiatorId == arenaGladiatorId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     *  Security rules for GameType data, allowing public read access.
     * @path /gameTypes/{gameTypeId}
     * @allow (get, list) Any user can read game type information.
     * @deny (create, update, delete) No user can create, update, or delete game types (admin only).
     * @principle Public read access with restricted write access.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description
     *  Security rules for ModeratorAction data, restricting access to moderators and administrators.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (create) Moderators/admins can create moderator actions.
     * @allow (get, list, update, delete) Moderators/admins can access and manage moderator actions.
     * @deny (create, get, list, update, delete) Regular users cannot access moderator actions.
     * @principle Role-based access control (RBAC) for sensitive operations.
     */
    match /moderatorActions/{moderatorActionId} {
        // CRITICAL: Cannot implement role-based access control without role information in request.auth.
        // TODO: Add role validation once the UserProfile entity is updated with role information and
        // that role information is made available in the request.auth object.
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description
     *  Security rules for FreeGame data, allowing public read access and owner-only writes.
     * @path /freegames/{gameId}
     * @allow (get, list) Any user can read free game configurations.
     * @deny (create, update, delete) Only the owner can create, update, or delete free games.
     * @principle Public read access with owner-only writes.
     */
    match /freegames/{gameId} {
      allow get: if true;
      allow list: if true;
        // CRITICAL: Cannot implement owner-only writes. The 'FreeGame' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.

        /**
         * @description
         *  Security rules for FreeGameTicket data, restricting access to moderators and administrators.
         *  FreeGameTicket are subcollection of /freegames/{gameId}.
         * @path /freegames/{gameId}/tickets/{ticketId}
         */
        match /tickets/{ticketId} {
          // CRITICAL: Cannot implement role-based access control without role information in request.auth.
          // TODO: Add role validation once the UserProfile entity is updated with role information and
          // that role information is made available in the request.auth object.
            allow get: if false;
            allow list: if false;
            allow create: if false;
            allow update: if false;
            allow delete: if false;
        }
    }
  }
}