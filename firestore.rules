rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership based on user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership based on user ID and resource existence.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the authenticated user has the 'moderator' or 'administrator' role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isModerator() {
        // TODO: Implement role-based authentication using a custom claim or a roles collection.
        return false;
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) User with auth `uid: "user123"` creates profile at `/users/user123/userProfiles/user123`
     * @deny (create) User with auth `uid: "user456"` attempts to create profile at `/users/user123/userProfiles/user123`
     * @principle Enforces document ownership for writes, requires matching userId in path and document.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId && userId == userProfileId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for ArenaGladiators.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create) User with auth `uid: "user123"` creates gladiator at `/users/user123/arenaGladiators/gladiator456`
     * @deny (update) User with auth `uid: "user456"` attempts to update gladiator at `/users/user123/arenaGladiators/gladiator456`
     * @principle Enforces document ownership for writes, requires matching userId in path and document.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for Wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User with auth `uid: "user123"` creates wallet at `/users/user123/wallets/wallet789`
     * @deny (delete) User with auth `uid: "user456"` attempts to delete wallet at `/users/user123/wallets/wallet789`
     * @principle Enforces document ownership for writes, requires matching userId in path and document.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for FreePlayGames.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create) User with auth `uid: "user123"` creates game at `/users/user123/freePlayGames/game101`
     * @deny (update) User with auth `uid: "user456"` attempts to update game at `/users/user123/freePlayGames/game101`
     * @principle Enforces document ownership for writes, requires matching userId in path and document.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for GameTickets.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create) User with auth `uid: "user123"` creates ticket at `/users/user123/arenaGladiators/gladiator456/gameTickets/ticket202`
     * @deny (delete) User with auth `uid: "user456"` attempts to delete ticket at `/users/user123/arenaGladiators/gladiator456/gameTickets/ticket202`
     * @principle Enforces document ownership for writes, requires matching userId in path and document.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to GameTypes, but restricts writes.
     * @path /gameTypes/{gameTypeId}
     * @allow (get) Any user can get a GameType.
     * @allow (list) Any user can list GameTypes.
     * @deny (create) Any user cannot create a GameType.
     * @principle Allows public read access while restricting writes to authorized users (e.g., admins).
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
    }

    /**
     * @description Enforces access control for ModeratorActions. Only moderators can create.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (create) User with moderator role can create a ModeratorAction.
     * @deny (get) Regular user attempts to get a ModeratorAction.
     *  @principle Restricts access to moderator actions based on user role.
     */
    match /moderatorActions/{moderatorActionId} {
      allow get: if isModerator();
      allow list: if isModerator();
      allow create: if isModerator();
      allow update: if isModerator();
      allow delete: if isModerator();
    }

    /**
     * @description Allows public read access to FreeGames, but restricts writes.
     * @path /freegames/{gameId}
     * @allow (get) Any user can get a FreeGame.
     * @allow (list) Any user can list FreeGames.
     * @deny (create) Any user cannot create a FreeGame.
     * @principle Allows public read access while restricting writes.
     */
    match /freegames/{gameId} {
      allow get: if true;
      allow list: if true;

      /**
       * @description Enforces access control for FreeGameTickets.
       * @path /freegames/{gameId}/tickets/{ticketId}
       * @allow (create) Any user can create a FreeGameTicket.
       * @deny (get) Regular user attempts to get a FreeGameTicket.
       * @principle Allows public read access while restricting writes.
       */
      match /tickets/{ticketId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if false;
        allow delete: if false;
      }
    }
  }
}