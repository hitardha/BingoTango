/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data,
 *               restricts access to sensitive information, and allows public read access
 *               to certain collections. Super admins have elevated privileges.
 *
 * Data Structure:
 * - /sponsors/{sponsorId}: Sponsor data, accessible only to the sponsor themselves.
 * - /users/{userId}/...: User-owned data (profiles, gladiators, wallets, games).
 * - /gameTypes/{gameTypeId}: Public game type definitions.
 * - /moderatorActions/{moderatorActionId}: Moderator actions, restricted to admins/moderators.
 * - /freegames/{gameId}: Free game configurations, publicly writable.
 * - /operators/{operatorId}: Operator data, restricted to super admins.
 *
 * Key Security Decisions:
 * - User data is strictly isolated under /users/{userId}.
 * - get() calls are avoided by denormalizing authorization data.
 * - Public read access is granted to /gameTypes.
 * - Super admins can manage operators and moderator actions.
 * - The 'freegames' collection is publicly writable to allow anonymous users to create free games.
 *
 * Denormalization for Authorization:
 * - User-specific data includes the userId in the document to avoid get() calls.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId}, while public game types are in /gameTypes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a sponsor to read and write their own data.
     * @path /sponsors/{sponsorId}
     * @allow (create) User with matching UID can create a sponsor document.
     * @allow (get, update, delete) Authenticated user with UID matching sponsorId.
     * @deny (create, update, delete) Any other user.
     * @principle Enforces document ownership for writes.
     */
    match /sponsors/{sponsorId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(sponsorId) {
        return request.auth.uid == sponsorId;
      }

      function isExistingOwner(sponsorId) {
        return isOwner(sponsorId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(sponsorId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(sponsorId);
      allow update: if isExistingOwner(sponsorId);
      allow delete: if isExistingOwner(sponsorId);
    }

    /**
     * @description Allows a sponsor to read and write games that they created.
     * @path /sponsors/{sponsorId}/games/{gameId}
     * @allow (create) Authenticated sponsor can create games.
     * @allow (get, update, delete) Authenticated sponsor can get, update, and delete games.
     * @deny (create, update, delete) Any other user.
     * @principle Enforces document ownership for writes.
     */
    match /sponsors/{sponsorId}/games/{gameId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(sponsorId) {
        return request.auth.uid == sponsorId;
      }

      function isExistingOwner(sponsorId) {
        return isOwner(sponsorId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(sponsorId);
      allow list: if isSignedIn() && isOwner(sponsorId);
      allow create: if isSignedIn() && isOwner(sponsorId);
      allow update: if isExistingOwner(sponsorId);
      allow delete: if isExistingOwner(sponsorId);
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) User with matching UID can create a profile.
     * @allow (get, update, delete) Authenticated user with UID matching userId.
     * @deny (create, update, delete) Any other user.
     * @principle Enforces document ownership for writes and validates userId.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own ArenaGladiator data.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create) User with matching UID can create a gladiator.
     * @allow (get, update, delete) Authenticated user with UID matching userId.
     * @deny (create, update, delete) Any other user.
     * @principle Enforces document ownership for writes and validates userId.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own wallet data.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User with matching UID can create a wallet.
     * @allow (get, update, delete) Authenticated user with UID matching userId.
     * @deny (create, update, delete) Any other user.
     * @principle Enforces document ownership for writes and validates userId.
     */
    match /users/{userId}/wallets/{walletId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own FreePlayGame data.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create) User with matching UID can create a FreePlayGame.
     * @allow (get, update, delete) Authenticated user with UID matching userId.
     * @deny (create, update, delete) Any other user.
     * @principle Enforces document ownership for writes and validates userId.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own GameTicket data.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create) User with matching UID can create a GameTicket.
     * @allow (get, update, delete) Authenticated user with UID matching userId.
     * @deny (create, update, delete) Any other user.
     * @principle Enforces document ownership for writes and validates userId.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to GameType documents.
     * @path /gameTypes/{gameTypeId}
     * @allow (get, list) Any user can read GameType data.
     * @deny (create, update, delete) No user can create, update, or delete GameType data without authentication.
     * @principle Allows public read access while restricting write access.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows super admins to read and write ModeratorAction documents.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (get, list, create, update, delete) Authenticated super admins.
     * @deny (get, list, create, update, delete) Any other user.
     * @principle Restricts access to moderator actions to super admins only.
     */
    match /moderatorActions/{moderatorActionId} {
       function isSignedIn() {
        return request.auth != null;
      }
      function isSuperAdmin() {
        return isSignedIn() && request.auth.token.superAdmin == true;
      }
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }

    /**
     * @description Allows public read and write access to FreeGame documents and their subcollections.
     * @path /freegames/{gameId}
     * @allow (get, list, create, update, delete) Any user can perform any operation on FreeGame data.
     * @principle Allows public access.
     */
     match /freegames/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;

      /**
       * @description Allows public read and write access to FreeGameTicket documents.
       * @path /freegames/{gameId}/tickets/{ticketId}
       * @allow (get, list, create, update, delete) Any user can perform any operation on FreeGameTicket data.
       * @principle Allows public access.
       */
      match /tickets/{ticketId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
      }
    }

    /**
     * @description Allows super admins to manage operator accounts.
     * @path /operators/{operatorId}
     * @allow (get, list, create, update, delete) Authenticated super admins.
     * @deny (get, list, create, update, delete) Any other user.
     * @principle Restricts access to operators to super admins only.
     */
    match /operators/{operatorId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isSuperAdmin() {
          return isSignedIn() && (request.auth.token.superAdmin == true || request.auth.token.email == "hitardha@xenford.com");
      }

      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }
  }
}