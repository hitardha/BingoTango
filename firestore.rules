/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data and provides public read access to game-related data.
 *
 * Data Structure:
 * - /users/{userId}/userProfiles/{userProfileId}: User profile information, accessible only by the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}: ArenaGladiator data, owned by the user.
 * - /users/{userId}/wallets/{walletId}: Wallet information, owned by the user.
 * - /users/{userId}/freePlayGames/{freePlayGameId}: FreePlayGame data, owned by the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}: GameTicket data, owned by the user.
 * - /gameTypes/{gameTypeId}: Game type information, publicly readable.
 * - /moderatorActions/{moderatorActionId}: Moderator actions, restricted to moderators/admins.
 * - /freegames/{gameId}: Free game configurations, publicly readable.
 * - /freegames/{gameId}/tickets/{ticketId}: Tickets for free games.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Game type data is publicly readable.
 * - Moderator actions are restricted to moderators/admins (TODO: Implement role-based access).
 * - No user listing is allowed.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - User-specific data includes the userId in the document to support query authorization patterns (QAPs).
 * - ArenaGladiator includes userId.
 * - Wallet includes userId.
 * - FreePlayGame includes userId.
 * - GameTicket includes userId.
 *
 * Structural Segregation:
 * - Public game configurations are stored separately from private user data in the /freegames collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) User A with ID 'user_abc' can create a profile at /users/user_abc/userProfiles/user_abc if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) User A with ID 'user_abc' can access their profile at /users/user_abc/userProfiles/user_abc if authenticated as 'user_abc'.
     * @deny (create) User A with ID 'user_abc' cannot create a profile for another user at /users/user_xyz/userProfiles/user_abc.
     * @deny (get, list, update, delete) User A with ID 'user_abc' cannot access User B's profile at /users/user_xyz/userProfiles/user_xyz.
     * @principle Enforces document ownership, validates relational integrity.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own ArenaGladiator data.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create) User A with ID 'user_abc' can create a gladiator at /users/user_abc/arenaGladiators/gladiator_123 if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) User A with ID 'user_abc' can access their gladiator at /users/user_abc/arenaGladiators/gladiator_123 if authenticated as 'user_abc'.
     * @deny (create) User A with ID 'user_abc' cannot create a gladiator for another user at /users/user_xyz/arenaGladiators/gladiator_123.
     * @deny (get, list, update, delete) User A with ID 'user_abc' cannot access User B's gladiator at /users/user_xyz/arenaGladiators/gladiator_456.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own wallet data.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User A with ID 'user_abc' can create a wallet at /users/user_abc/wallets/wallet_123 if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) User A with ID 'user_abc' can access their wallet at /users/user_abc/wallets/wallet_123 if authenticated as 'user_abc'.
     * @deny (create) User A with ID 'user_abc' cannot create a wallet for another user at /users/user_xyz/wallets/wallet_123.
     * @deny (get, list, update, delete) User A with ID 'user_abc' cannot access User B's wallet at /users/user_xyz/wallets/wallet_456.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == walletId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own FreePlayGame data.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create) User A with ID 'user_abc' can create a freePlayGame at /users/user_abc/freePlayGames/game_123 if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) User A with ID 'user_abc' can access their freePlayGame at /users/user_abc/freePlayGames/game_123 if authenticated as 'user_abc'.
     * @deny (create) User A with ID 'user_abc' cannot create a freePlayGame for another user at /users/user_xyz/freePlayGames/game_123.
     * @deny (get, list, update, delete) User A with ID 'user_abc' cannot access User B's freePlayGame at /users/user_xyz/freePlayGames/game_456.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to read and write their own GameTicket data.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create) User A with ID 'user_abc' can create a gameTicket at /users/user_abc/arenaGladiators/gladiator_123/gameTickets/ticket_123 if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) User A with ID 'user_abc' can access their gameTicket at /users/user_abc/arenaGladiators/gladiator_123/gameTickets/ticket_123 if authenticated as 'user_abc'.
     * @deny (create) User A with ID 'user_abc' cannot create a gameTicket for another user at /users/user_xyz/arenaGladiators/gladiator_456/gameTickets/ticket_123.
     * @deny (get, list, update, delete) User A with ID 'user_abc' cannot access User B's gameTicket at /users/user_xyz/arenaGladiators/gladiator_456/gameTickets/ticket_456.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.arenaGladiatorId == arenaGladiatorId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.arenaGladiatorId == arenaGladiatorId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read GameType data.
     * @path /gameTypes/{gameTypeId}
     * @allow (get, list) Any user, authenticated or not, can read game type data.
     * @deny (create, update, delete) No one can create, update, or delete game type data without custom roles (TODO).
     * @principle Public read access with restricted writes.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin/moderator role check.
      allow update: if false; // TODO: Add admin/moderator role check.
      allow delete: if false; // TODO: Add admin/moderator role check.
    }

    /**
     * @description Restricts access to ModeratorAction data to authorized moderators.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (create) Only moderators can create moderator actions. (TODO: Implement role-based access)
     * @allow (get, list, update, delete) Only moderators can access moderator actions. (TODO: Implement role-based access)
     * @principle Restricts access to moderator actions.
     */
    match /moderatorActions/{moderatorActionId} {
      allow get: if false; // TODO: Add admin/moderator role check.
      allow list: if false; // TODO: Add admin/moderator role check.
      allow create: if false; // TODO: Add admin/moderator role check.
      allow update: if false; // TODO: Add admin/moderator role check.
      allow delete: if false; // TODO: Add admin/moderator role check.
    }

    /**
     * @description Allows anyone to read free game configurations.
     * @path /freegames/{gameId}
     * @allow (get, list) Any user, authenticated or not, can read free game configurations.
     * @deny (create, update, delete) No one can create, update, or delete free game configurations without custom roles (TODO).
     * @principle Public read access.
     */
    match /freegames/{gameId} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add admin/moderator role check.
        allow update: if false; // TODO: Add admin/moderator role check.
        allow delete: if false; // TODO: Add admin/moderator role check.

        /**
         * @description Allows anyone to read free game ticket data.
         * @path /freegames/{gameId}/tickets/{ticketId}
         */
        match /tickets/{ticketId} {
            allow get: if true;
            allow list: if true;
            allow create: if false; // TODO: Add admin/moderator role check.
            allow update: if false; // TODO: Add admin/moderator role check.
            allow delete: if false; // TODO: Add admin/moderator role check.
        }
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

   // Helper function to determine if the user is the owner of the document and if the document exists.
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}