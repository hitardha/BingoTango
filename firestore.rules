/**
 * @file Firebase Security Rules for Firestore.
 *
 * @Core Philosophy: This ruleset enforces a strict user-ownership model for personal data,
 *                    public read access for shared game content, and role-based access for
 *                    administrative functions. It uses path-based authorization and data
 *                    denormalization to ensure secure and efficient data access.
 *
 * @Data Structure:
 *   - /sponsors/{sponsorId}: Sponsor accounts.
 *   - /users/{userId}/...: User-specific data (profiles, gladiators, wallets, games).
 *   - /gameTypes/{gameTypeId}: Publicly readable game type definitions.
 *   - /moderatorActions/{moderatorActionId}: Actions performed by moderators.
 *   - /freegames/{gameId}: Publicly writable Free Game definitions.
 *   - /operators/{operatorId}: Operator/Admin user account.
 *
 * @Key Security Decisions:
 *   - User data is strictly controlled by the owning user.
 *   - GameTypes are publicly readable.
 *   - Moderator actions are restricted to authorized moderators/admins.
 *   - Public write access is enabled on the /freegames collection to allow for anonymous gameplay.
 *   - Listing of user subcollections is generally allowed for the owning user.
 *   - The `operators` collection is restricted to super admins.
 *
 * @Denormalization for Authorization:
 *   - User ownership is enforced by matching the `userId` in the path with `request.auth.uid`.
 *   - No external `get()` calls are used for authorization checks.
 *
 * @Structural Segregation:
 *   - Private user data is stored under /users/{userId} to prevent unauthorized access.
 *   - Publicly accessible game types are stored in a separate top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows sponsors to manage their own data.
     * @path /sponsors/{sponsorId}
     * @allow (get, create, update, delete) if the user is authenticated and the sponsorId matches the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not authenticated or the sponsorId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and requires authentication for all operations.
     */
    match /sponsors/{sponsorId} {
      allow get: if isSignedIn() && isOwner(sponsorId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(sponsorId);
      allow update: if isSignedIn() && isExistingOwner(sponsorId);
      allow delete: if isSignedIn() && isExistingOwner(sponsorId);

      /**
       * @description Allows sponsors to manage their games.
       * @path /sponsors/{sponsorId}/games/{gameId}
       * @allow (get, create, update, delete) if the user is authenticated and the sponsorId matches the authenticated user's UID.
       * @deny (get, create, update, delete) if the user is not authenticated or the sponsorId does not match the authenticated user's UID.
       * @principle Enforces document ownership for writes and requires authentication for all operations.
       */
      match /games/{gameId} {
        allow get: if isSignedIn() && isOwner(sponsorId);
        allow list: if isSignedIn() && isOwner(sponsorId);
        allow create: if isSignedIn() && isOwner(sponsorId);
        allow update: if isSignedIn() && isExistingOwner(sponsorId);
        allow delete: if isSignedIn() && isExistingOwner(sponsorId);
      }
    }

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (get, create, update, delete) if the user is authenticated and the userId and userProfileId match the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not authenticated or the userId or userProfileId do not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and requires authentication for all operations.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isSignedIn() && isOwner(userId) && userId == userProfileId;
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && userId == userProfileId;
    }

    /**
     * @description Allows users to manage their own ArenaGladiator data.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (get, create, update, delete) if the user is authenticated and the userId matches the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not authenticated or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and requires authentication for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their own wallet data.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (get, create, update, delete) if the user is authenticated and the userId matches the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not authenticated or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and requires authentication for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their free play game sessions.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (get, create, update, delete) if the user is authenticated and the userId matches the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not authenticated or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and requires authentication for all operations.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage game tickets for their ArenaGladiators.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (get, create, update, delete) if the user is authenticated and the userId matches the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not authenticated or the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes and requires authentication for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to game types.
     * @path /gameTypes/{gameTypeId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access to game type data while restricting write access.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to moderator actions to authenticated users with a moderator or admin role.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (get, list, create, update, delete) if the user is authenticated and has the 'moderator' or 'administrator' role.
     * @deny (get, list, create, update, delete) if the user is not authenticated or does not have the required role.
     * @principle Restricts access based on user role.
     */
    match /moderatorActions/{moderatorActionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public write access to free games and their tickets.
     * @path /freegames/{gameId}
     * @allow (get, list, create, update, delete) to anyone.
     */
    match /freegames/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;

      /**
       * @description Allows public write access to free game tickets.
       * @path /freegames/{gameId}/tickets/{ticketId}
       * @allow (get, list, create, update, delete) to anyone.
       */
      match /tickets/{ticketId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
      }
    }

    /**
     * @description Restricts access to operator data to super admins.
     * @path /operators/{operatorId}
     * @allow (get, list, create, update, delete) if the user is a super admin.
     * @deny (get, list, create, update, delete) if the user is not a super admin.
     * @principle Restricts access based on admin role.
     */
    match /operators/{operatorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the document.
   * @param {string} userId The user ID to check against.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of the document and the document exists.
   * @param {string} userId The user ID to check against.
   * @return {boolean} True if the user is the owner and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}