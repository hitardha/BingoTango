/**
 * @fileoverview Firestore Security Rules for the Munerator application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to certain collections.
 * Administrative functions are protected by role-based access control.
 *
 * Data Structure:
 * - `/sponsors/{sponsorId}`: Sponsors and their created games.
 * - `/users/{userId}/...`: User-specific data, including profiles, ArenaGladiators, wallets and games.
 * - `/gameTypes/{gameTypeId}`: Publicly accessible game type definitions.
 * - `/moderatorActions/{moderatorActionId}`: Actions performed by moderators.
 * - `/freegames/{gameId}`: Public collection for storing free game data, writable by anyone, including anonymous users.
 * - `/operators/{operatorId}`: Stores operator information, accessible only to super admins.
 * - `/settings/{settingId}`: Stores global settings, readable by all authenticated users, writable only by admins.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - `get` operations do not verify document existence to allow the backend to return "Not Found" errors.
 * - Data validation is minimal in this prototyping phase. Authorization and relationship integrity are the primary focus.
 *
 * Denormalization for Authorization:
 * User ownership is enforced by matching the `request.auth.uid` against the document ID or a dedicated `userId` field within the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource's userId field.
     */
    function isResourceOwner() {
        return isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     *               This is used to verify the document exists before updates and deletes.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)).data != null;
    }

    /**
     * @description Checks if the user is a super admin.
     */
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superAdmin == true;
    }

    /**
     * @description Allows only the authenticated sponsor to read or write their own document.
     * @path /sponsors/{sponsorId}
     * @allow (create) User with UID 'sponsor123' creates a new sponsor document with id 'sponsor123'.
     * @deny (create) User with UID 'otherUser' attempts to create a sponsor document with id 'sponsor123'.
     * @principle Enforces document ownership; only the authenticated user can create their document.
     */
    match /sponsors/{sponsorId} {
      allow get: if isOwner(sponsorId);
      allow list: if false; // Prevent listing of all sponsors

      allow create: if isOwner(sponsorId) && request.auth.uid == sponsorId;
      allow update: if isOwner(sponsorId);
      allow delete: if isOwner(sponsorId);

      /**
       * @description Stores games created by a specific sponsor.
       * @path /sponsors/{sponsorId}/games/{gameId}
       * @allow (create) Authenticated sponsor with UID 'sponsor123' creates a new game with any id.
       * @deny (create) Unauthenticated user attempts to create a game.
       * @principle Enforces document ownership; only the authenticated sponsor can create games under their sponsor document.
       */
      match /games/{gameId} {
        allow get: if isOwner(sponsorId);
        allow list: if isOwner(sponsorId);

        allow create: if isOwner(sponsorId);
        allow update: if isOwner(sponsorId);
        allow delete: if isOwner(sponsorId);
      }
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) User with UID 'user123' creates a new profile with id 'user123'.
     * @deny (create) User with UID 'otherUser' attempts to create a profile with id 'user123'.
     * @principle Enforces document ownership; only the authenticated user can create their profile.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
        allow get: if isOwner(userId);
        allow list: if false; // Prevent listing of all user profiles

        allow create: if isOwner(userId) && request.auth.uid == userId;
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Stores Gladiator profile information created upon signup.
     * @path /users/{userId}/gladiatorProfiles/{profileId}
     * @allow (create) User with UID 'user123' creates a new gladiator profile with id 'user123'.
     * @deny (create) User with UID 'otherUser' attempts to create a gladiator profile with id 'user123'.
     * @principle Enforces document ownership; only the authenticated user can create their profile.
     */
    match /users/{userId}/gladiatorProfiles/{profileId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Stores ArenaGladiator data, owned by the user.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create) User with UID 'user123' creates a new ArenaGladiator with any id.
     * @deny (create) User with UID 'otherUser' attempts to create an ArenaGladiator with id 'arena123'.
     * @principle Enforces document ownership; only the authenticated user can create data under their user document.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Stores wallet information for each user.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) User with UID 'user123' creates a new wallet with any id.
     * @deny (create) User with UID 'otherUser' attempts to create a wallet with id 'wallet123'.
     * @principle Enforces document ownership; only the authenticated user can create data under their user document.
     */
    match /users/{userId}/wallets/{walletId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Stores free play game sessions for each user.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create) User with UID 'user123' creates a new FreePlayGame with any id.
     * @deny (create) User with UID 'otherUser' attempts to create a FreePlayGame with id 'freeGame123'.
     * @principle Enforces document ownership; only the authenticated user can create data under their user document.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Stores game tickets for each ArenaGladiator.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create) User with UID 'user123' creates a new GameTicket with any id under their ArenaGladiator.
     * @deny (create) User with UID 'otherUser' attempts to create a GameTicket under user123's ArenaGladiator.
     * @principle Enforces document ownership; only the authenticated user can create data under their ArenaGladiator document.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);

        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
    }

    /**
     * @description Stores information about different game types.
     * @path /gameTypes/{gameTypeId}
     * @allow (get, list) Any user can read game type information.
     * @deny (create, update, delete) No one can create, update, or delete game types.
     * @principle Public read access; no write access.
     */
    match /gameTypes/{gameTypeId} {
        allow get: if true;
        allow list: if true;

        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Stores actions performed by moderators. Requires admin/moderator role to access.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (read) Only super admins can read moderator actions.
     * @deny (write) No one can write to this collection directly.
     * @principle Role-based access control; only admins can manage moderator actions.
     */
    match /moderatorActions/{moderatorActionId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores the configuration for a free game session.
     * @path /freegames/{gameId}
     */
    match /freegames/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if true; // TODO: Add owner validation once the schema is updated with an ownership field.

      /**
       * @description Stores the tickets generated for a specific free game.
       * @path /freegames/{gameId}/tickets/{ticketId}
       */
      match /tickets/{ticketId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if true; // TODO: Add owner validation once the schema is updated with an ownership field.
      }
    }

    /**
     * @description Stores information about administrators and operators. Access should be restricted to super admins.
     * @path /operators/{operatorId}
     */
    match /operators/{operatorId} {
        allow get: if isSuperAdmin();
        allow list: if isSuperAdmin();

        allow create: if isSuperAdmin();
        allow update: if isSuperAdmin();
        allow delete: if isSuperAdmin();
    }

    /**
     * @description Stores global application settings. Readable by all authenticated users but only writable by administrators.
     * @path /settings/{settingId}
     */
    match /settings/{settingId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();

        allow create: if isSuperAdmin();
        allow update: if isSuperAdmin();
        allow delete: if isSuperAdmin();
    }
  }
}