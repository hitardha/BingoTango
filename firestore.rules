/**
 * @fileoverview Firestore Security Rules for the Munerators application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to shared game data.
 * Administrative functions are protected by role-based access control.
 *
 * Data Structure:
 * - /sponsors/{sponsorId}: Sponsor profiles, accessible only to the sponsor.
 * - /users/{userId}/userProfiles/{userProfileId}: User profile information, accessible only to the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}: ArenaGladiator profiles, accessible only to the user.
 * - /users/{userId}/wallets/{walletId}: User wallets, accessible only to the user.
 * - /users/{userId}/freePlayGames/{freePlayGameId}: Free play game sessions, accessible only to the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}: Game tickets, accessible only to the user.
 * - /gameTypes/{gameTypeId}: Publicly readable game type definitions.
 * - /moderatorActions/{moderatorActionId}: Actions performed by moderators; write access restricted to moderators/admins.
 * - /freegames/{gameId}/tickets/{ticketId}: Free game data, publicly writable.
 * - /operators/{operatorId}: Operator profiles, accessible only to super admins.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - `get()` calls are avoided by denormalizing authorization data onto documents.
 * - Strict data validation is relaxed in favor of rapid prototyping, focusing on ownership and relational integrity.
 * - Public read access is granted to the `gameTypes` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /sponsors/{sponsorId} collection. Sponsors can only access their own documents.
     * @path /sponsors/{sponsorId}
     * @allow (read, write) if request.auth.uid == sponsorId
     * @deny (read, write) if request.auth.uid != sponsorId
     * @principle Enforces document ownership for all operations.
     */
    match /sponsors/{sponsorId} {
      function isOwner(sponsorId) {
        return request.auth.uid == sponsorId;
      }
      allow get: if isOwner(sponsorId);
      allow list: if false;
      allow create: if isOwner(sponsorId);
      allow update: if isOwner(sponsorId) && resource != null;
      allow delete: if isOwner(sponsorId) && resource != null;

      /**
       * @description Rules for the /sponsors/{sponsorId}/games/{gameId} subcollection. Sponsors can only access their own games.
       * @path /sponsors/{sponsorId}/games/{gameId}
       * @allow (read, write) if request.auth.uid == sponsorId
       * @deny (read, write) if request.auth.uid != sponsorId
       * @principle Enforces document ownership for all operations.
       */
      match /games/{gameId} {
        allow get: if isOwner(sponsorId);
        allow list: if isOwner(sponsorId);
        allow create: if isOwner(sponsorId);
        allow update: if isOwner(sponsorId) && resource != null;
        allow delete: if isOwner(sponsorId) && resource != null;
      }
    }

    /**
     * @description Rules for the /users/{userId}/userProfiles/{userProfileId} collection. Users can only access their own profile.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create, get, list, update, delete) if the user is the owner of the profile.
     * @deny (create, get, list, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations. Validates the path and document ID on create.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId && request.resource.data.id == userProfileId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/arenaGladiators/{arenaGladiatorId} collection. Users can only access their own ArenaGladiators.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create, get, list, update, delete) if the user is the owner of the ArenaGladiator.
     * @deny (create, get, list, update, delete) if the user is not the owner of the ArenaGladiator.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/wallets/{walletId} collection. Users can only access their own wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create, get, list, update, delete) if the user is the owner of the wallet.
     * @deny (create, get, list, update, delete) if the user is not the owner of the wallet.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/freePlayGames/{freePlayGameId} collection. Users can only access their own free play games.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create, get, list, update, delete) if the user is the owner of the free play game.
     * @deny (create, get, list, update, delete) if the user is not the owner of the free play game.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} collection. Users can only access their own game tickets.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create, get, list, update, delete) if the user is the owner of the game ticket.
     * @deny (create, get, list, update, delete) if the user is not the owner of the game ticket.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /gameTypes/{gameTypeId} collection. Game types are publicly accessible.
     * @path /gameTypes/{gameTypeId}
     * @allow (read) to anyone.
     * @deny (create, update, delete) to anyone.
     * @principle Allows public read access but restricts writes.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /moderatorActions/{moderatorActionId} collection. Only moderators/admins can create moderator actions.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (create) to moderators/admins.
     * @deny (read, update, delete) to anyone.
     * @principle Restricts write access to moderators/admins.
     */
    match /moderatorActions/{moderatorActionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn(); // TODO: Add admin/moderator role check once roles are implemented.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /freegames/{gameId} collection. Free games are publicly writable.
     * @path /freegames/{gameId}
     * @allow (read, write) to anyone.
     * @principle Allows public access for free game creation.
     */
    match /freegames/{gameId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;

      /**
       * @description Rules for the /freegames/{gameId}/tickets/{ticketId} subcollection. Tickets for a free game are publicly writable.
       * @path /freegames/{gameId}/tickets/{ticketId}
       * @allow (read, write) to anyone.
       * @principle Allows public access for ticket creation.
       */
      match /tickets/{ticketId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
      }
    }

    /**
     * @description Rules for the /operators/{operatorId} collection. Only super admins can access operator data.
     * @path /operators/{operatorId}
     * @allow (read, write) to super admins.
     * @deny (read, write) to anyone else.
     * @principle Restricts access to operator data to super admins.
     */
    match /operators/{operatorId} {
      function isSuperAdmin() {
        return request.auth.token.superAdmin == true;
      }
      allow get: if isSuperAdmin();
      allow list: if false;
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() && resource != null;
      allow delete: if isSuperAdmin() && resource != null;
    }
  }
}