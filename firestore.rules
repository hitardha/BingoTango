/**
 * @fileoverview Firestore Security Rules for the Munerators application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to certain collections.
 * Administrative access is role-based, leveraging custom claims.
 * Data validation is minimized to allow for rapid prototyping.
 *
 * Data Structure:
 * - /sponsors/{sponsorId}: Sponsor accounts. Only accessible to the owning sponsor.
 * - /users/{userId}/userProfiles/{userProfileId}: User profile information, owned by the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}: Arena gladiator profiles, owned by the user.
 * - /users/{userId}/wallets/{walletId}: User wallets, owned by the user.
 * - /users/{userId}/freePlayGames/{freePlayGameId}: Free play game sessions, owned by the user.
 * - /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}: Game tickets, owned by the user and associated with a specific gladiator.
 * - /gameTypes/{gameTypeId}: Publicly readable collection of game types.
 * - /moderatorActions/{moderatorActionId}: Moderator actions, restricted to moderators and admins.
 * - /freegames/{gameId}: Publicly writable collection of free games.
 * - /freegames/{gameId}/tickets/{ticketId}: Publicly writable collection of free game tickets.
 * - /operators/{operatorId}: Stores operator data, accessible only by super admins.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - Public read access is granted to the `gameTypes` collection.
 * - Free games and tickets are publicly writable
 * - Data shape validation is minimized to accelerate prototyping.
 *
 * Denormalization for Authorization:
 * - User-owned documents are nested under `/users/{userId}` to enable path-based authorization using `isOwner()`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the document exists.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'superAdmin' custom claim.
     * @returns {boolean} True if the user is a super admin.
     */
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superAdmin == true;
    }

    /**
     * @description Rules for the /sponsors/{sponsorId} collection.
     * @path /sponsors/{sponsorId}
     * @allow (get, update, delete) if isOwner(sponsorId)
     * @deny (get, update, delete) if !isSignedIn() or request.auth.uid != sponsorId
     * @principle Enforces document ownership for all operations.
     */
    match /sponsors/{sponsorId} {
      allow get: if isOwner(sponsorId);
      allow list: if false;

      allow create: if isOwner(sponsorId) && request.resource.data.id == sponsorId;
      allow update: if isExistingOwner(sponsorId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(sponsorId);

      /**
       * @description Rules for the /sponsors/{sponsorId}/games/{gameId} subcollection.
       * @path /sponsors/{sponsorId}/games/{gameId}
       * @allow (create, update, delete) if isOwner(sponsorId)
       * @deny (create, update, delete) if !isSignedIn() or request.auth.uid != sponsorId
       * @principle Enforces document ownership for all write operations.
       */
      match /games/{gameId} {
        allow get: if isOwner(sponsorId);
        allow list: if isOwner(sponsorId);
        allow create: if isOwner(sponsorId);
        allow update: if isExistingOwner(sponsorId);
        allow delete: if isExistingOwner(sponsorId);
      }
    }

    /**
     * @description Rules for the /users/{userId}/userProfiles/{userProfileId} collection.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (get, update, delete) if isOwner(userId)
     * @deny (get, update, delete) if !isSignedIn() or request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/arenaGladiators/{arenaGladiatorId} collection.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (get, update, delete) if isOwner(userId)
     * @deny (get, update, delete) if !isSignedIn() or request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/wallets/{walletId} collection.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (get, update, delete) if isOwner(userId)
     * @deny (get, update, delete) if !isSignedIn() or request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/freePlayGames/{freePlayGameId} collection.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (get, update, delete) if isOwner(userId)
     * @deny (get, update, delete) if !isSignedIn() or request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} collection.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (get, update, delete) if isOwner(userId)
     * @deny (get, update, delete) if !isSignedIn() or request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /gameTypes/{gameTypeId} collection.
     * @path /gameTypes/{gameTypeId}
     * @allow get, list: if true
     * @deny create, update, delete: if true
     * @principle Allows public read access and forbids writes.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /moderatorActions/{moderatorActionId} collection.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (create, get, list) if isSuperAdmin()
     * @deny (create, get, list) if !isSuperAdmin()
     */
    match /moderatorActions/{moderatorActionId} {
        allow get: if isSuperAdmin();
        allow list: if isSuperAdmin();
        allow create: if isSuperAdmin();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for the /freegames/{gameId} collection.
     * @path /freegames/{gameId}
     */
    match /freegames/{gameId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if false;
        allow delete: if false;

        /**
         * @description Rules for the /freegames/{gameId}/tickets/{ticketId} subcollection.
         * @path /freegames/{gameId}/tickets/{ticketId}
         */
        match /tickets/{ticketId} {
            allow get: if true;
            allow list: if true;
            allow create: if true;
            allow update: if false;
            allow delete: if false;
        }
    }

    /**
     * @description Rules for the /operators/{operatorId} collection.
     * @path /operators/{operatorId}
     */
    match /operators/{operatorId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin() && request.resource.data.UID == operatorId;
      allow update: if isSuperAdmin() && resource.data.UID == operatorId;
      allow delete: if isSuperAdmin() && resource.data.UID == operatorId;
    }
  }
}