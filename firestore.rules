/**
 * @fileOverview Firestore Security Rules for the Munerator application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while providing controlled access to shared and global data.
 *
 * Data Structure:
 * - User-specific data (profiles, gladiators, wallets, free play games, game tickets) is nested under `/users/{userId}`.
 * - Sponsor data is stored under `/sponsors/{sponsorId}`.
 * - Game types are stored globally under `/gameTypes/{gameTypeId}`.
 * - Moderator actions are stored under `/moderatorActions/{moderatorActionId}`.
 * - Operator data is stored under `/operators/{operatorId}`.
 * - Global settings are stored under `/settings/{settingId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data, enforced via path-based rules and data validation.
 * - Listing of user documents is generally allowed within their own subcollections.
 * - Game types are publicly readable.
 * - Moderator actions are restricted to admins/moderators.
 * - Operator data is restricted to super admins.
 * - Settings are readable by all authenticated users, writable by admins.
 * - Removed public write access to freegames
 *
 * Denormalization for Authorization:
 * The rules leverage path-based ownership (e.g., `/users/{userId}/...`) to avoid costly `get()` calls. Where document-level authorization is needed, consider adding a `userId` field to the document and validating it during creation to match the path.
 *
 * Structural Segregation:
 * Data is segregated based on access patterns. User-specific data is stored under `/users/{userId}` to enforce individual ownership, while shared or global data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication check.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization check.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization check for existing resources.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Checks if the user is a super admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization check.
     */
    function isSuperAdmin() {
        return request.auth.token.superAdmin == true;
    }    

    /**
     * @description Rules for the sponsors collection.
     * @path /sponsors/{sponsorId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /sponsors/{sponsorId} {
      allow get: if isOwner(sponsorId);
      allow list: if isOwner(sponsorId);
      allow create: if isOwner(sponsorId);
      allow update: if isExistingOwner(sponsorId);
      allow delete: if isExistingOwner(sponsorId);

      /**
       * @description Rules for the games subcollection under sponsors.
       * @path /sponsors/{sponsorId}/games/{gameId}
       * @allow (get) Authenticated sponsor with matching UID.
       * @allow (list) Authenticated sponsor with matching UID.
       * @allow (create) Authenticated sponsor with matching UID.
       * @allow (update) Authenticated sponsor with matching UID.
       * @allow (delete) Authenticated sponsor with matching UID.
       * @deny (get) Authenticated sponsor with non-matching UID.
       * @deny (create) Authenticated sponsor with non-matching UID.
       * @principle Enforces ownership for the subcollection.
       */
      match /games/{gameId} {
        allow get: if isOwner(sponsorId);
        allow list: if isOwner(sponsorId);
        allow create: if isOwner(sponsorId);
        allow update: if isExistingOwner(sponsorId);
        allow delete: if isExistingOwner(sponsorId);
      }
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for Gladiator profiles.
     * @path /users/{userId}/gladiatorProfiles/{profileId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/gladiatorProfiles/{profileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for ArenaGladiators.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn(); // No owner validation during creation.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for Wallets.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn(); // No owner validation during creation.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for FreePlayGames.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn(); // No owner validation during creation.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for GameTickets.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn(); // No owner validation during creation.
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for GameTypes.
     * @path /gameTypes/{gameTypeId}
     * @allow (get) Public read access.
     * @allow (list) Public read access.
     * @deny (create) No public create access.
     * @deny (update) No public update access.
     * @deny (delete) No public delete access.
     * @principle Public read access, no write access.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for ModeratorActions.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (get) Only accessible to super admins.
     * @allow (list) Only accessible to super admins.
     * @allow (create) Only accessible to super admins.
     * @allow (update) Only accessible to super admins.
     * @allow (delete) Only accessible to super admins.
     * @deny (get) Not accessible to non-admins.
     * @deny (create) Not accessible to non-admins.
     * @principle Restricts access to administrator/moderator roles.
     */
    match /moderatorActions/{moderatorActionId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    /**
     * @description Rules for Operator.
     * @path /operators/{operatorId}
     * @allow (get) Authenticated user with matching UID.
     * @allow (list) Authenticated user with matching UID.
     * @allow (create) Authenticated user with matching UID.
     * @allow (update) Authenticated user with matching UID.
     * @allow (delete) Authenticated user with matching UID.
     * @deny (get) Authenticated user with non-matching UID.
     * @deny (create) Authenticated user with non-matching UID.
     * @principle Enforces document ownership for all operations.
     */
    match /operators/{operatorId} {
      allow get: if isSuperAdmin();
      allow list: if isSuperAdmin();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Rules for Settings.
     * @path /settings/{settingId}
     * @allow (get) Public read access for authenticated users.
     * @allow (list) Public read access for authenticated users.
     * @deny (create) No public create access.
     * @deny (update) No public update access.
     * @deny (delete) No public delete access.
     * @principle Public read access for authenticated users, no write access.
     */
    match /settings/{settingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
  }
}