/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and allows public read access for certain collections, with owner-only writes.
 *
 * Data Structure:
 * - User-specific data (profiles, gladiators, wallets, free play games, and game tickets) is nested under `/users/{userId}`.
 * - Game types are stored in a top-level `/gameTypes` collection and are publicly readable.
 * - Moderator actions are stored in a top-level `/moderatorActions` collection and are restricted to moderators/admins.
 * - Free games configurations are stored in the `/freegames/{gameId}` collection and are publicly readable with owner-only writes
 *
 * Key Security Decisions:
 * - Strict user-ownership is enforced for all data nested under `/users/{userId}`.
 * - Public read access is allowed for the `/gameTypes` and `/freegames` collections.
 * - Moderator actions are restricted to users with moderator/admin roles (implementation TBD).
 * - Data validation is limited to relational integrity checks (e.g., userId consistency) to allow for rapid prototyping.
 * - The ruleset denormalizes authorization data (e.g., ownerId) onto documents to avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * Used for update and delete operations to ensure the document exists and is owned by the user.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description User profile information.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (create) - Authenticated user creates their profile with matching userId and userProfileId.
     * @deny (create) - Authenticated user tries to create a profile for a different userId.
     * @allow (get, update, delete) - Authenticated user accesses/modifies/deletes their own profile.
     * @deny (get, update, delete) - Authenticated user tries to access/modify/delete someone else's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description ArenaGladiator data, owned by the user.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (create) - Authenticated user creates a gladiator under their userId.
     * @deny (create) - Authenticated user tries to create a gladiator for a different userId.
     * @allow (get, update, delete) - Authenticated user accesses/modifies/deletes their own gladiator.
     * @deny (get, update, delete) - Authenticated user tries to access/modify/delete someone else's gladiator.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Wallet information for each user.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (create) - Authenticated user creates a wallet under their userId.
     * @deny (create) - Authenticated user tries to create a wallet for a different userId.
     * @allow (get, update, delete) - Authenticated user accesses/modifies/deletes their own wallet.
     * @deny (get, update, delete) - Authenticated user tries to access/modify/delete someone else's wallet.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Free play game sessions for each user.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (create) - Authenticated user creates a free play game under their userId.
     * @deny (create) - Authenticated user tries to create a free play game for a different userId.
     * @allow (get, update, delete) - Authenticated user accesses/modifies/deletes their own free play game.
     * @deny (get, update, delete) - Authenticated user tries to access/modify/delete someone else's free play game.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Game tickets for each ArenaGladiator.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (create) - Authenticated user creates a game ticket under their userId and arenaGladiatorId.
     * @deny (create) - Authenticated user tries to create a game ticket for a different userId or arenaGladiatorId.
     * @allow (get, update, delete) - Authenticated user accesses/modifies/deletes their own game ticket.
     * @deny (get, update, delete) - Authenticated user tries to access/modify/delete someone else's game ticket.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Information about different game types. Accessible to all users.
     * @path /gameTypes/{gameTypeId}
     * @allow (get, list) - Any user can read the game types.
     * @deny (create, update, delete) - No user can create, update, or delete game types (admin only).
     * @principle Allows public read access with restricted write access.
     */
    match /gameTypes/{gameTypeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Actions performed by moderators. Requires admin/moderator role to access.
     * @path /moderatorActions/{moderatorActionId}
     */
    match /moderatorActions/{moderatorActionId} {
      allow get, list: if false; // TODO: Implement admin/moderator role check
      allow create, update, delete: if false; // TODO: Implement admin/moderator role check
    }

    /**
     * @description Stores the configuration for a free game session.
     * @path /freegames/{gameId}
     * @allow (get, list) - Any user can read the free games.
     * @deny (create, update, delete) -  Writes should be only allowed for an admin/moderator.
     * @principle Allows public read access with restricted write access.
     */
    match /freegames/{gameId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Implement admin/moderator role check

      /**
       * @description Stores the tickets generated for a specific free game.
       * @path /freegames/{gameId}/tickets/{ticketId}
       */
        match /freegames/{gameId}/tickets/{ticketId} {
            allow get, list: if true;
            allow create, update, delete: if false; // TODO: Implement validation based on freegame write permissions.
        }
    }
  }
}