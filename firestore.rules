/**
 * @fileOverview Firestore Security Rules for the Munerator application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while providing public read access to shared game data. SuperAdmins have full access to all data.
 *
 * Data Structure:
 * - User-specific data (profiles, gladiators, wallets, free play games, game tickets) is nested under `/users/{userId}`.
 * - Sponsor data is stored under `/sponsors/{sponsorId}`.
 * - Shared game data (game types, free games) is stored in top-level collections.
 * - Moderator actions are stored under `/moderatorActions/{moderatorActionId}`.
 * - Operator data is stored under `/operators/{operatorId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the `/users/{userId}` tree.
 * - Sponsors can only access their own data under the `/sponsors/{sponsorId}` collection.
 * - SuperAdmins have full read and write access to all collections.
 * - Public read access is granted to the `/gameTypes` and `/freegames` collections.
 * - Public create access is granted to the `/freegames` collection and its subcollections to allow anonymous users to create games and tickets.
 * - Listing of user documents under `/users/{userId}` is allowed only for the owner.
 * - The exact schema of the data is NOT validated to allow rapid iteration.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced using path-based rules (e.g., `/users/{userId}/...`).
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public game data is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is a SuperAdmin.
     */
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.SuperAdmin == "Yes";
    }

    /**
     * @description Allows anyone to read.
     */
    function allowRead() {
        return true;
    }

    /**
     * @description Allows anyone to create.
     */
    function allowCreate() {
        return true;
    }
    
    /**
     * @description Allows anyone to update.
     */
    function allowUpdate() {
        return true;
    }

    /**
     * @description Allows anyone to delete.
     */
    function allowDelete() {
        return true;
    }

    /**
     * @description Grants full access to SuperAdmins.
     */
    function allowAllAccessToSuperAdmin() {
        return isSignedIn() && isSuperAdmin();
    }

    /**
     * @description Grants owner access to a specific userId.
     */
    function allowOwnerAccess(userId) {
      return isSignedIn() && isOwner(userId);
    }


    /**
     * @description Rules for the /sponsors/{sponsorId} collection.
     * @path /sponsors/{sponsorId}
     * @allow (get, list) if request.auth.uid == sponsorId
     * @allow (create, update, delete) if request.auth.uid == sponsorId
     * @deny (get, list) if request.auth.uid != sponsorId
     * @deny (create, update, delete) if request.auth.uid != sponsorId
     * @principle Enforces document ownership for all operations.
     */
    match /sponsors/{sponsorId} {
      allow get: if allowOwnerAccess(sponsorId) || allowAllAccessToSuperAdmin();
      allow list: if allowOwnerAccess(sponsorId) || allowAllAccessToSuperAdmin();
      allow create: if allowOwnerAccess(sponsorId) || allowAllAccessToSuperAdmin();
      allow update: if isExistingOwner(sponsorId) || allowAllAccessToSuperAdmin();
      allow delete: if isExistingOwner(sponsorId) || allowAllAccessToSuperAdmin();

      /**
       * @description Rules for the /sponsors/{sponsorId}/games/{gameId} subcollection.
       * @path /sponsors/{sponsorId}/games/{gameId}
       * @allow (get, list, create, update, delete) if request.auth.uid == sponsorId
       * @deny (get, list, create, update, delete) if request.auth.uid != sponsorId
       * @principle Enforces document ownership for all operations in the subcollection.
       */
      match /games/{gameId} {
        allow get: if allowOwnerAccess(sponsorId) || allowAllAccessToSuperAdmin();
        allow list: if allowOwnerAccess(sponsorId) || allowAllAccessToSuperAdmin();
        allow create: if allowOwnerAccess(sponsorId) || allowAllAccessToSuperAdmin();
        allow update: if isExistingOwner(sponsorId) || allowAllAccessToSuperAdmin();
        allow delete: if isExistingOwner(sponsorId) || allowAllAccessToSuperAdmin();
      }
    }

    /**
     * @description Rules for the /users/{userId}/userProfiles/{userProfileId} collection.
     * @path /users/{userId}/userProfiles/{userProfileId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/userProfiles/{userProfileId} {
      allow get: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow list: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId || allowAllAccessToSuperAdmin();
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || allowAllAccessToSuperAdmin();
      allow delete: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/arenaGladiators/{arenaGladiatorId} collection.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId} {
      allow get: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow list: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow create: if isOwner(userId) || allowAllAccessToSuperAdmin();
      allow update: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
      allow delete: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/wallets/{walletId} collection.
     * @path /users/{userId}/wallets/{walletId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wallets/{walletId} {
      allow get: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow list: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow create: if isOwner(userId) || allowAllAccessToSuperAdmin();
      allow update: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
      allow delete: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/freePlayGames/{freePlayGameId} collection.
     * @path /users/{userId}/freePlayGames/{freePlayGameId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/freePlayGames/{freePlayGameId} {
      allow get: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow list: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow create: if isOwner(userId) || allowAllAccessToSuperAdmin();
      allow update: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
      allow delete: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} collection.
     * @path /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}
     * @allow (get, list) if request.auth.uid == userId
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (get, list) if request.auth.uid != userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId} {
      allow get: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow list: if allowOwnerAccess(userId) || allowAllAccessToSuperAdmin();
      allow create: if isOwner(userId) || allowAllAccessToSuperAdmin();
      allow update: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
      allow delete: if isExistingOwner(userId) || allowAllAccessToSuperAdmin();
    }

    /**
     * @description Rules for the /gameTypes/{gameTypeId} collection.
     * @path /gameTypes/{gameTypeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Allows public read access, but no writes.
     */
    match /gameTypes/{gameTypeId} {
      allow get: if allowRead() || allowAllAccessToSuperAdmin();
      allow list: if allowRead() || allowAllAccessToSuperAdmin();
      allow create: if allowAllAccessToSuperAdmin();
      allow update: if allowAllAccessToSuperAdmin();
      allow delete: if allowAllAccessToSuperAdmin();
    }

    /**
     * @description Rules for the /moderatorActions/{moderatorActionId} collection.
     * @path /moderatorActions/{moderatorActionId}
     * @allow (get, list, create, update, delete) if request.auth.token.role == 'moderator' || request.auth.token.role == 'administrator'
     * @deny (get, list, create, update, delete) if request.auth.token.role != 'moderator' && request.auth.token.role != 'administrator'
     */
    match /moderatorActions/{moderatorActionId} {
      allow get: if allowAllAccessToSuperAdmin();
      allow list: if allowAllAccessToSuperAdmin();
      allow create: if allowAllAccessToSuperAdmin();
      allow update: if allowAllAccessToSuperAdmin();
      allow delete: if allowAllAccessToSuperAdmin();
    }

    /**
     * @description Rules for the /freegames/{gameId} collection.
     * @path /freegames/{gameId}
     */
    match /freegames/{gameId} {
      allow get: if allowRead() || allowAllAccessToSuperAdmin();
      allow list: if allowRead() || allowAllAccessToSuperAdmin();
      allow create: if allowCreate() || allowAllAccessToSuperAdmin();
      allow update: if allowUpdate() || allowAllAccessToSuperAdmin();
      allow delete: if allowDelete() || allowAllAccessToSuperAdmin();

      /**
       * @description Rules for the /freegames/{gameId}/tickets/{ticketId} subcollection.
       * @path /freegames/{gameId}/tickets/{ticketId}
       */
      match /tickets/{ticketId} {
        allow get: if allowRead() || allowAllAccessToSuperAdmin();
        allow list: if allowRead() || allowAllAccessToSuperAdmin();
        allow create: if allowCreate() || allowAllAccessToSuperAdmin();
        allow update: if allowUpdate() || allowAllAccessToSuperAdmin();
        allow delete: if allowDelete() || allowAllAccessToSuperAdmin();
      }
    }

    /**
     * @description Rules for the /operators/{operatorId} collection.
     * @path /operators/{operatorId}
     */
    match /operators/{operatorId} {
      allow get: if allowAllAccessToSuperAdmin();
      allow list: if allowAllAccessToSuperAdmin();
      allow create: if allowAllAccessToSuperAdmin();
      allow update: if allowAllAccessToSuperAdmin();
      allow delete: if allowAllAccessToSuperAdmin();
    }
  }
}