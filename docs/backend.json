
{
  "entities": {
    "Sponsor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sponsor",
      "type": "object",
      "description": "Represents a sponsor or Munerator who can create and manage games.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Sponsor, matching the Firebase Auth UID."
        },
        "sponsorName": {
          "type": "string",
          "description": "The official name of the sponsoring entity."
        },
        "brandName": {
          "type": "string",
          "description": "The brand name to be displayed in games."
        },
        "contactPerson": {
          "type": "string",
          "description": "Name of the primary contact person."
        },
        "contactNumber": {
          "type": "string",
          "description": "Contact phone number."
        },
        "email": {
          "type": "string",
          "description": "The user's email address, used for login.",
          "format": "email"
        },
        "signupDate": {
          "type": "string",
          "description": "Date and time when the user registered.",
          "format": "date-time"
        },
        "lastLoginDate": {
          "type": "string",
          "description": "Date and time of the user's last login.",
          "format": "date-time"
        },
        "numberOfGames": {
          "type": "number",
          "description": "The total number of games created by this sponsor."
        },
        "Role": {
          "type": "string",
          "description": "The user's role, defaults to 'Sponsor'.",
          "default": "Sponsor"
        },
        "SponsorLevel": {
          "type": "string",
          "description": "The sponsor's level, e.g., 'Beginner'.",
          "default": "Beginner"
        },
        "SubscriptionLevel": {
          "type": "string",
          "description": "The subscription level, e.g., 'Free'.",
          "default": "Free"
        },
        "subscriptionEndDate": {
          "type": [
            "string",
            "null"
          ],
          "format": "date-time",
          "description": "The end date of the subscription, if any."
        },
        "Tags": {
          "type": [
            "array",
            "null"
          ],
          "description": "Tags associated with the sponsor.",
          "items": {
            "type": "string"
          }
        },
        "Remarks": {
          "type": [
            "string",
            "null"
          ],
          "description": "Administrative remarks."
        },
        "UserType": {
          "type": "string",
          "description": "The type of user, defaults to 'M' for Munerator.",
          "default": "M"
        }
      },
      "required": [
        "id",
        "sponsorName",
        "brandName",
        "contactPerson",
        "contactNumber",
        "email",
        "signupDate",
        "lastLoginDate",
        "numberOfGames"
      ]
    },
    "ArenaGladiator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ArenaGladiator",
      "type": "object",
      "description": "Represents a gladiator profile within the Arena game mode, linked to a user account.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ArenaGladiator entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 ArenaGladiator)"
        },
        "nickname": {
          "type": "string",
          "description": "The gladiator's display name in the Arena."
        },
        "wins": {
          "type": "number",
          "description": "Number of wins in the Arena."
        },
        "losses": {
          "type": "number",
          "description": "Number of losses in the Arena."
        },
        "experiencePoints": {
          "type": "number",
          "description": "Total experience points earned in the Arena."
        },
        "walletId": {
          "type": "string",
          "description": "Reference to Wallet. (Relationship: Wallet 1:1 ArenaGladiator)"
        },
        "friendIds": {
          "type": "array",
          "description": "References to other ArenaGladiators representing friends. (Relationship: ArenaGladiator N:N ArenaGladiator)",
          "items": {
            "type": "string"
          }
        },
        "gameTicketIds": {
          "type": "array",
          "description": "References to GameTickets. (Relationship: GameTicket 1:N ArenaGladiator)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "nickname",
        "wins",
        "losses",
        "experiencePoints",
        "walletId"
      ]
    },
    "FreePlayGame": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FreePlayGame",
      "type": "object",
      "description": "Represents a free play game session.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the FreePlayGame entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N FreePlayGame)"
        },
        "gameTypeId": {
          "type": "string",
          "description": "Reference to GameType. (Relationship: GameType 1:N FreePlayGame)"
        },
        "startTime": {
          "type": "string",
          "description": "Timestamp indicating when the game session started.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "Timestamp indicating when the game session ended.",
          "format": "date-time"
        },
        "winnings": {
          "type": "number",
          "description": "Amount of winnings earned during the free play session."
        }
      },
      "required": [
        "id",
        "userId",
        "gameTypeId",
        "startTime",
        "endTime",
        "winnings"
      ]
    },
    "GameTicket": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GameTicket",
      "type": "object",
      "description": "Represents a ticket to participate in a game within the Arena.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the GameTicket entity."
        },
        "arenaGladiatorId": {
          "type": "string",
          "description": "Reference to ArenaGladiator. (Relationship: ArenaGladiator 1:N GameTicket)"
        },
        "gameTypeId": {
          "type": "string",
          "description": "Reference to GameType. (Relationship: GameType 1:N GameTicket)"
        },
        "purchaseDate": {
          "type": "string",
          "description": "Date and time when the ticket was purchased.",
          "format": "date-time"
        },
        "expirationDate": {
          "type": "string",
          "description": "Date and time when the ticket expires.",
          "format": "date-time"
        },
        "used": {
          "type": "boolean",
          "description": "Indicates whether the ticket has been used."
        }
      },
      "required": [
        "id",
        "arenaGladiatorId",
        "gameTypeId",
        "purchaseDate",
        "expirationDate",
        "used"
      ]
    },
    "GameType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GameType",
      "type": "object",
      "description": "Represents a specific type of game available in the Arena or Free Play.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the GameType entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the game type (e.g., 'Classic Bingo', 'Speed Bingo')."
        },
        "description": {
          "type": "string",
          "description": "Description of the game type and its rules."
        },
        "baseCost": {
          "type": "number",
          "description": "The base cost to play this game type (e.g., cost of a ticket)."
        },
        "rewardMultiplier": {
          "type": "number",
          "description": "Multiplier applied to winnings for this game type."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "baseCost",
        "rewardMultiplier"
      ]
    },
    "ModeratorAction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ModeratorAction",
      "type": "object",
      "description": "Represents an action performed by a moderator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ModeratorAction entity."
        },
        "moderatorId": {
          "type": "string",
          "description": "Reference to User who is the moderator. (Relationship: User 1:N ModeratorAction)"
        },
        "targetUserId": {
          "type": "string",
          "description": "Reference to User who is the target of the action. (Relationship: User 1:N ModeratorAction)"
        },
        "actionType": {
          "type": "string",
          "description": "Type of action performed (e.g., 'Ban', 'Warning')."
        },
        "reason": {
          "type": "string",
          "description": "Reason for the action."
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp indicating when the action was performed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "moderatorId",
        "targetUserId",
        "actionType",
        "reason",
        "timestamp"
      ]
    },
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile including non-sensitive account information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time when the user registered.",
          "format": "date-time"
        },
        "lastLogin": {
          "type": "string",
          "description": "Date and time of the user's last login.",
          "format": "date-time"
        },
        "role": {
          "type": "string",
          "description": "The user's role (e.g., 'player', 'moderator', 'administrator')."
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "registrationDate",
        "lastLogin",
        "role"
      ]
    },
    "GladiatorProfile": {
      "title": "GladiatorProfile",
      "type": "object",
      "description": "Represents a gladiator's profile, created upon signup.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The Firebase Auth UID of the user."
        },
        "username": {
          "type": "string",
          "description": "The gladiator's chosen display name."
        },
        "dob": {
          "type": "string",
          "format": "date-time",
          "description": "The user's date of birth."
        },
        "gender": {
          "type": "string",
          "description": "The user's gender."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The user's contact email address."
        },
        "referredBy": {
          "type": "string",
          "description": "The referral code of the user who referred them, if any."
        },
        "referralCode": {
          "type": "string",
          "description": "This user's unique referral code."
        },
        "numberOfReferrals": {
          "type": "number",
          "description": "The number of users who have signed up with this user's referral code.",
          "default": 0
        },
        "wallet": {
          "type": "number",
          "description": "The user's in-game currency balance."
        },
        "userLevel": {
          "type": "string",
          "description": "The user's current level.",
          "default": "beginner"
        },
        "subscriptionLevel": {
          "type": "string",
          "description": "The user's subscription level.",
          "default": "free"
        },
        "subscriptionType": {
          "type": "string",
          "description": "The type of subscription.",
          "default": "free"
        },
        "subscriptionEod": {
          "type": "string",
          "format": "date-time",
          "description": "The end-of-date for the user's subscription."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of when the profile was created."
        }
      },
      "required": [
        "userId",
        "username",
        "dob",
        "gender",
        "email",
        "referralCode",
        "numberOfReferrals",
        "wallet",
        "userLevel",
        "subscriptionLevel",
        "subscriptionType",
        "subscriptionEod",
        "createdAt"
      ]
    },
    "Wallet": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Wallet",
      "type": "object",
      "description": "Represents a user's digital wallet, storing their in-game currency.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Wallet entity."
        },
        "balance": {
          "type": "number",
          "description": "Current balance of in-game currency."
        },
        "lastTransactionDate": {
          "type": "string",
          "description": "Date and time of the last transaction.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "balance",
        "lastTransactionDate"
      ]
    },
    "FreeGame": {
      "title": "FreeGame",
      "type": "object",
      "description": "Represents a free game session.",
      "properties": {
        "gameName": {
          "type": "string",
          "description": "The name of the game."
        },
        "grid": {
          "type": "string",
          "description": "The grid size (e.g., '3x3')."
        },
        "numbers": {
          "type": "string",
          "description": "The numbers or sequences for the game."
        },
        "goldenTicketGrid": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "string",
              "null"
            ]
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "gameName",
        "grid",
        "numbers",
        "createdAt"
      ]
    },
    "FreeGameTicket": {
      "title": "FreeGameTicket",
      "type": "object",
      "description": "Represents a player's ticket for a free game.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the player."
        },
        "grid": {
          "type": "array",
          "items": {
            "type": [
              "number",
              "string",
              "null"
            ]
          }
        },
        "score": {
          "type": "number",
          "description": "The player's final score."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "name",
        "grid",
        "score",
        "createdAt"
      ]
    },
    "Operator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Operator",
      "type": "object",
      "description": "Represents an administrator or operator with specific permissions.",
      "properties": {
        "UID": {
          "type": "string",
          "description": "Unique identifier for the Operator, matching the Firebase Auth UID."
        },
        "UserName": {
          "type": "string",
          "description": "The username of the operator."
        },
        "SuperAdmin": {
          "type": "string",
          "description": "Indicates if the operator has super admin privileges.",
          "enum": ["Yes", "No"]
        },
        "Attributes": {
          "type": "string",
          "description": "Comma-separated values for attribute-based authorization."
        },
        "Remarks": {
          "type": "string",
          "description": "Administrative remarks."
        }
      },
      "required": [
        "UID",
        "UserName",
        "SuperAdmin"
      ]
    },
    "Setting": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Setting",
      "type": "object",
      "description": "Represents a global application setting.",
      "properties": {
        "shortcode": {
          "type": "string",
          "description": "A short code to uniquely identify and access the setting in the app."
        },
        "settingName": {
          "type": "string",
          "description": "A descriptive name for the setting."
        },
        "settingValue": {
          "type": "string",
          "description": "The value of the setting, stored as a string."
        },
        "valueType": {
          "type": "string",
          "description": "The data type of the setting's value for typecasting.",
          "enum": [
            "string",
            "number",
            "boolean"
          ]
        },
        "remarks": {
          "type": [
            "string",
            "null"
          ],
          "description": "Optional administrative remarks about the setting."
        }
      },
      "required": [
        "shortcode",
        "settingName",
        "settingValue",
        "valueType"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "phone",
      "google.com"
    ],
    "customClaims": {
      "superAdmin": {
        "type": "boolean"
      }
    }
  },
  "firestore": {
    "structure": [
      {
        "path": "/sponsors/{sponsorId}",
        "definition": {
          "entityName": "Sponsor",
          "schema": {
            "$ref": "#/entities/Sponsor"
          },
          "description": "Stores information about sponsors (Munerators). Only the authenticated sponsor can read or write to their own document. A subcollection 'games' will store the games created by the sponsor.",
          "params": [
            {
              "name": "sponsorId",
              "description": "The ID of the sponsor, which must match the authenticated user's UID."
            }
          ],
          "subcollections": {
            "path": "/games/{gameId}",
            "definition": {
              "entityName": "GameType",
              "schema": {
                "$ref": "#/entities/GameType"
              },
              "description": "Stores games created by a specific sponsor."
            }
          }
        }
      },
      {
        "path": "/users/{userId}/userProfiles/{userProfileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path-based ownership ensures only the user can access their profile. Includes userId in the document to support QAPs.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            },
            {
              "name": "userProfileId",
              "description": "The ID of the user profile, which should match the userId."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/gladiatorProfiles/{profileId}",
        "definition": {
          "entityName": "GladiatorProfile",
          "schema": {
            "$ref": "#/entities/GladiatorProfile"
          },
          "description": "Stores Gladiator profile information created upon signup. Only the authenticated user can read or write to their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user, which must match the authenticated user's UID."
            },
            {
              "name": "profileId",
              "description": "The ID of the profile, which must also match the user's UID for a 1:1 relationship."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/arenaGladiators/{arenaGladiatorId}",
        "definition": {
          "entityName": "ArenaGladiator",
          "schema": {
            "$ref": "#/backend/entities/ArenaGladiator"
          },
          "description": "Stores ArenaGladiator data, owned by the user. Path-based ownership. Includes userId in the document to support QAPs.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            },
            {
              "name": "arenaGladiatorId",
              "description": "The ID of the ArenaGladiator, generated by the system."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/wallets/{walletId}",
        "definition": {
          "entityName": "Wallet",
          "schema": {
            "$ref": "#/backend/entities/Wallet"
          },
          "description": "Stores wallet information for each user. Path-based ownership. Includes userId in the document to support QAPs.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            },
            {
              "name": "walletId",
              "description": "The ID of the wallet, generated by the system."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/freePlayGames/{freePlayGameId}",
        "definition": {
          "entityName": "FreePlayGame",
          "schema": {
            "$ref": "#/backend/entities/FreePlayGame"
          },
          "description": "Stores free play game sessions for each user. Path-based ownership. Includes userId in the document to support QAPs.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            },
            {
              "name": "freePlayGameId",
              "description": "The ID of the free play game, generated by the system."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/arenaGladiators/{arenaGladiatorId}/gameTickets/{gameTicketId}",
        "definition": {
          "entityName": "GameTicket",
          "schema": {
            "$ref": "#/backend/entities/GameTicket"
          },
          "description": "Stores game tickets for each ArenaGladiator. Path-based ownership. Includes userId in the document to support QAPs.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user."
            },
            {
              "name": "arenaGladiatorId",
              "description": "The ID of the ArenaGladiator to whom the ticket belongs."
            },
            {
              "name": "gameTicketId",
              "description": "The ID of the game ticket, generated by the system."
            }
          ]
        }
      },
      {
        "path": "/gameTypes/{gameTypeId}",
        "definition": {
          "entityName": "GameType",
          "schema": {
            "$ref": "#/backend/entities/GameType"
          },
          "description": "Stores information about different game types. Accessible to all users.",
          "params": [
            {
              "name": "gameTypeId",
              "description": "The ID of the game type, generated by the system."
            }
          ]
        }
      },
      {
        "path": "/moderatorActions/{moderatorActionId}",
        "definition": {
          "entityName": "ModeratorAction",
          "schema": {
            "$ref": "#/backend/entities/ModeratorAction"
          },
          "description": "Stores actions performed by moderators. Requires admin/moderator role to access.",
          "params": [
            {
              "name": "moderatorActionId",
              "description": "The ID of the moderator action, generated by the system."
            }
          ]
        }
      },
      {
        "path": "/freegames/{gameId}",
        "definition": {
          "entityName": "FreeGame",
          "schema": {
            "$ref": "#/entities/FreeGame"
          },
          "description": "Stores the configuration for a free game session. It is publicly writable so anonymous users can create games.",
          "subcollections": {
            "path": "/tickets/{ticketId}",
            "definition": {
              "entityName": "FreeGameTicket",
              "schema": {
                "$ref": "#/entities/FreeGameTicket"
              },
              "description": "Stores the tickets generated for a specific free game. It is publicly writable so anonymous users can create tickets."
            }
          }
        }
      },
      {
        "path": "/operators/{operatorId}",
        "definition": {
          "entityName": "Operator",
          "schema": {
            "$ref": "#/entities/Operator"
          },
          "description": "Stores information about administrators and operators. Access should be restricted to super admins.",
          "params": [
            {
              "name": "operatorId",
              "description": "The ID of the operator, which must match the authenticated user's UID."
            }
          ]
        }
      },
      {
        "path": "/settings/{settingId}",
        "definition": {
          "entityName": "Setting",
          "schema": {
            "$ref": "#/entities/Setting"
          },
          "description": "Stores global application settings. Should be readable by all authenticated users but only writable by administrators.",
          "params": [
            {
              "name": "settingId",
              "description": "The ID of the setting document."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability. User-owned data is nested under the `/users/{userId}` path, promoting secure and efficient ownership-based security rules. Collaborative data utilizes membership maps for access control. The design emphasizes denormalization to avoid `get()` calls in security rules, enabling atomic operations and improving performance.\n\n*   **Authorization Independence:** The structure avoids hierarchical authorization dependencies by storing all authorization-related data within the document itself or by using path-based ownership (e.g., `/users/{userId}/arenagladiators/{arenaGladiatorId}`). This enables atomic operations and simplifies security rules.\n*   **QAPs Support:** The structure supports secure list operations (QAPs) by segregating data based on access needs (e.g., user-specific data under `/users/{userId}`). Membership maps are used for collaborative data, ensuring that only authorized users can access specific documents.\n\nData is segregated structurally based on access patterns. User profiles and ArenaGladiators are stored under the `/users/{userId}` collection to enforce individual ownership. GameTypes are stored globally since they are shared across users. Moderator actions are stored in a dedicated collection. The new `freegames` collection is added to store free game data publicly. The `sponsors` collection is added to manage Munerator accounts, with rules set so a sponsor can only access their own data. The new `operators` collection will store administrator and operator data, with access restricted to super admins."
  }
}

    